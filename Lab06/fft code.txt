int main() {
	// declare & initialize variables
	float scrapTime[5000]; // this is a scrap variable to store values
	float scrapAmplitude[5000]; // this is a scrap variable to store values
	float fs = 0.0;
	float timeStep = 0.0;
	int i = 0;
	int N = 0;
	FILE *fpIn;
	char inputFile[100];
	FILE *fpOut;
	char outputFile[100];
	

	// PROMPT USER FOR INPUT SIGNAL FILENAME
	printf_s("Please enter filename for input signal (.txt)\n");
	scanf("%s", &inputFile);
	
	printf_s("Please enter sampling frequency in file (Hz) \n");
	scanf("%f", &fs);

	//FILE *fpOut;
	fpIn = fopen(inputFile, "r");

	// test for file existence using exit statement
	if (fpIn == NULL) {
		printf("Error!! Cannot open file \n");
		exit(EXIT_FAILURE);
	}
	else {
		// automatically determine the number of points in data file
		while ((fscanf(fpIn, "%f %f", &scrapTime, &scrapAmplitude)) != EOF) {
			++N; // represent number of x and y data points
		}
		
		// moves the cursor to beginning of indicated file
		rewind(fpIn);

		// CHECK FOR N AS POWER OF 2
		// divide the variable a by 2 until the quotient is 1, indicating a power of two
		// if quotient is odd before reaching 1, the case is NOT a power of 2
		int a = N;
		printf("original N is %i\n", N);
		int nPaddedPoints = 0;

		int p = 1;
		while (pow(2, p) < N) {
			p++;
		}

		nPaddedPoints = pow(2, p);
		printf("Updated Number of Points: %i \n", nPaddedPoints);

		// DYNAMIC ALLOCATION
		float *arrayPtime;
		arrayPtime = (float *)calloc(sizeof(float), nPaddedPoints);
		float *arrayPamplitude;
		arrayPamplitude = (float *)calloc(sizeof(float), nPaddedPoints);
		
		// SCAN SUM OF SINE WAVE DATA FROM INPUT FILE
		for (int i = 0; i < N; ++i) {
			fscanf(fpIn, "%f %f", &arrayPtime[i], &arrayPamplitude[i]);
		}

		fclose(fpIn);
		free(arrayPtime);
		free(arrayPamplitude);

		// CALCULATE DISCRETE FOURIER TRANSFORM (DFT)
		fft(arrayPamplitude - 1, nPaddedPoints, 1); // this returns the first n/2 dft coeffcients (real & imaginary parts)
		// now, calculate the amplitude spectrum from the first n/2 harmonics

		// DYNAMIC ALLOCATION
		float *amplitudeSpectrum;
		amplitudeSpectrum = (float *)calloc(sizeof(float), (nPaddedPoints/2));
		float *kValues;
		kValues = (float *)calloc(sizeof(float), (nPaddedPoints/2));

		int i = 2;
		for (int k = 1; k < (nPaddedPoints/2 - 1); k++) {
			// i is regular index skip
			amplitudeSpectrum[k] = sqrt( pow(arrayPamplitude[i], 2) + pow(arrayPamplitude[i + 1], 2) ) * 2.0 / (float)N;
			kValues[k] = ((float)k*fs) /  (float)nPaddedPoints;
			i = i + 2;
		}

		// PROMPT USER FOR OUTPUT FILENAME
		printf_s("Please enter filename for data output (.txt)\n");
		scanf("%s",&outputFile);

		// PRINT DATA TO OUTPUT FILE
		fpOut = fopen(outputFile, "w");
		
		for (int k = 1; k < (nPaddedPoints / 2 - 1); k++) {
			fprintf(fpOut,"%f %f\n",kValues[k], amplitudeSpectrum[k]);
		}

		// PLOT GRAPH IN MATLAB
		//plotFrequencySpectra(kValues, amplitudeSpectrum, (nPaddedPoints/2));

		// FINISH PROGRAM
		free(amplitudeSpectrum);
		free(kValues);
		fclose(fpOut);

		printf("Part 1 Program 2 is complete. \n");
	}

	
	printf("DONE");
	getchar();
	getchar();
}