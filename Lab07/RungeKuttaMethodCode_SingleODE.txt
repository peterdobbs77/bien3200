// C code for solving a single ODE using the 4th order Runge-Kutta
#include<stdio.h>
#include<stdlib.h>
#include<math.h>

floatke, h;  //global variables
float slope (float, float);

int main (void){
	float t0 = 0, tf, h, x0, k1, k2, k3, k4;
	int N;
	char sim_file[100];
	FILE *out_file;
	float*out_time, *out_x;
	
	printf("Enter the values of the rate constant ke \n");
	scanf("%f", &ke);
	
	printf("Enter value of x at t = 0 \n");
	scanf("%f", &x0);
	
	printf("Enter the final time for solution \n");
	scanf("%f", &tf);
	
	printf("Enter the solution step size h \n");
	scanf("%f", &h);
	
	N = (int)(tf/h);  // number of points
	
	printf("Enter file nameto store solution \n");
	scanf("%s", sim_file);
	
	out_file = fopen(sim_file, "w");
	
	out_x = (float*) calloc(sizeof(float), N);
	out_time = (float*) calloc(sizeof(float), N);
	
	out_x[0] = x0;
	out_time[0] = 0;
	
	fprintf(out_file, "%f \t %f \t \n", out_time[0], out_x[0]);
	
	for(inti = 0;  i < N; ++i){
		out_time[i+1] = (i + 1) * h;
		k1 =  h* slope(out_time[i], out_x[i]);
		k2 =h* slope((out_time[i] + (h/2)), (out_x[i] + (k1/2)));
		k3 =  h* slope((out_time[i] + (h/2)), (out_x[i] + (k2/2))); 
		k4 =  h* slope((out_time[i] + h), (out_x[i] + k3)); 
		out_x[i + 1] = out_x[i] + (1.0/6)*(k1 + 2*k2 + 2*k3 + k4);
		fprintf(out_file, "%f \t %f \t \n", out_time[i+1], out_x[i+1]);
	}
	
	return0;
	}
	
	float slope(float t,float x){
		float out;
		out = -ke *x;
		return out;
	}